Linux进程管理

1、进程管理简介
	1）进程简介
		| 进程是正在执行的一个程序或命令，每一个进程都是一个运行的实体，都有自己的地址空间，并占用一定的系统资源
	2）进程管理的作用
		| 判断服务器健康状态
		| 查看系统中所有进程
		| 杀死进程

2、进程的查看
	1）查看所有进程
		| ps aux
			#查看系统中所有进程，使用BSD操作系统格式
		| ps -le
			#查看系统中所有进程，使用Linux标准命令格式
			选项：
				—— a：显示一个终端的所有进程，除了会话引线
				—— u：显示进程的归属用户及内存的使用情况
				—— x：显示没有控制终端的进程
				—— -l：长格式显示。显示更加详细的信息
				—— -e：显示所有进程，和-A作用一致
		| aux 显示内容
			USER PID CPU MEM
			VSZ：占用虚拟内存大小，KB
			RSS：占用实际物理内存大小，KB
			TTY：在哪个终端运行。其中tty1-tty7代表本地控制台终端，tty1-tty6是本地的字符界面终端，tty7是图形终端。pts/0-255代表虚拟终端
			STAT：进程状态。常见的状态有：
				R：运行
				S：睡眠
				T：停止状态
				s：包含子进程
				+：位于后台
			START：该进程的启动时间
			TIME：该进程占用CPU的运算时间，注意不是系统时间
			COMMAND：产生此进程的命令名
	2）查看进程树
		| pstree [选项]
			-p：显示进程的PID
			-u：显示进程的所属用户

	3）查看系统健康状态
		| top [选项]
			选项：
				-d 秒数	：指定top命令每隔几秒更新。默认3秒
				-b 		：使用批处理模式输出，一般和"-n"选项合用
				-n 次数	：指定top命令执行的次数
			在top命令的交互模式中可以执行的命令：
				? 或 h	：显示交互模式的帮助
				P 		：以CPU使用率排序，默认就是此项
				M 		：以内存的使用率排序
				N 		：以PID排序
				q 		：退出top
		| top显示内容
			第一行信息为任务队列信息：
				系统当前时间
				系统的运行时间
				当前登录了几个用户
				系统在之前1分钟，5分钟，15分钟的平均负载。(一般认为小于1*CPU核数时，负载较小。如果大于1*CPU核数，系统已经超出负荷)
			第二行为进程信息
				zombie：僵尸进程。如果不是0，需要手动检查僵尸进程
			第三行为CPU信息
			第四行为内存信息
				cached：作为缓存的交互分区大小
				buff：作为缓冲的交互分区大小
			第五行为交换分区(swap)信息

3、杀死进程
	1）kill命令
		kill -l
			#查看可用的进程信号
			信号代号		信号名称		说明
			1			SIGHUP		该信号让进程立即关闭，然后重新读取配置文件之后重启
			9			SIGKILL		用来立即结束程序的运行，本信号不能被阻塞、处理和忽略。一般用来强制终止进程
			15 			SIGTERM		正常结束进程的信号，kill命令的默认信号。有时进程已经发生问题，这个信号是无法正常终止进程的
		kill -1 2532
			#重启进程
		kill -9 2342
			#杀死进程
	2）killall命令
		killall [选项] [信号] 进程名
			#按照进程名杀死进程
			选项：
				-i：交互式，询问是否要杀死某个进程
				-I：忽略进程名的大小写
	3）pkill命令
		pkill [选项] [信号] 进程名
			#按照进程名终止进程
			选项：
				-t 终端号：按照终端号提出用户
		w	#查看当前登录的用户

4、修改进程优先级
	1）进程优先级简介
		Linux操作系统是一个多用户、多任务的操作系统，Linux系统中通知运行着非常多的进程。但是CPU在同一个时钟周期内只能运算一个指令。进程优先级决定了每个进程处理的先后顺序。
	2）查看优先级
		ps -le 
			# PRI代表Priority，NI代表Nice。这两个值都是优先级，数字越小代表该进程优先级越高。用户只能修改Nice的值
	3）修改优先级
		修改NI值注意事项：
			| NI的值得范围是-20到19
			| 普通用户调整NI值得范围是0到19，而且只能调整自己的进程
			| 普通用户只能调高NI值，而不能降低
			| root才能设定NI值为负值，而且可以调整任何用户的进程
			| PRI(最终值) = PRI(原始值) + NI
			| 用户只能修改NI值，不能直接修改PRI
	4）nice命令
		nice [选项] 命令
			#nice命令可以给新执行的命令直接赋予NI值，但是不能修改已经存在进程的NI值
			选项：
				-n NI值：给命令赋予NI值
			例如：
				nice -n -5 service httpd start
	5）renice命令
		renice [优先级] PID
			#renice命令是修改已经存在进程的NI值的命令
			例如：
				renice -10 2143