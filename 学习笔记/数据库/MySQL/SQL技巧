SQL技巧：

1、SQL分类：
	1）DDL	数据定义语言（定义数据库中的对象，create，alter）
	   TPL	事务处理语言（启动事务，commit，roback）
	   DCL	数据控制语言（控制数据库访问权限，grant）
	   DML	数据操作语言（对数据进行操作，select，insert，update）

1、join从句简介
	1）内连接：inner join
	2）左外连接：left outer join
		可查询不包含右表的记录：select <select_list> from Table A left join Table B on A.key = B.key where B.key is null
	3）右外连接：right outer join
		可查询不包含左表的记录：select <select_list> from Table A right join Table B on A.key = B.key where A.key is null
	4）全外连接：full outer join
		可查询不包含交集的记录：select <select_list> from Table A left join Table B on A.key = B.key where B.key is null or A.key is null
	5）交叉连接（笛卡尔连接）：cross join

2、join优化
	1）更新使用过滤条件包括自身的表：(update)
		Oracle可以在where条件后加自身表名，但不支持表关联
		MySQL不能在where条件后加自身表名，但支持表关联
			update table a join table b on a.key = b.key set a.column = ''
	2）使用join优化子查询：
		子查询：select a.user_name,a.over,(select over from user2 b where a.user_name= b.user_name) as over2 from user1 a;
		join连接：select a.user_name,a.over,b.over from user1 a left join user2 b on a.user_name=b.user_name
	3）使用join优化聚合子查询：
		查询四人分别杀怪最多的日期：
			普通子查询：select b.user_name,a.timer,a.kills from user_kills a left join user1 b on a.id = b.user_id where a.kills = (select max(kills) from user_kills c where c.user_id = a.user_id)
			join优化：select a.user_name,b.timer,b.kills from user1 a join user_kills b on a.id = b.user_id left join user_kills on c.user_id = b.user_id group by a.user_name,b.timer,b.kills having b.kills = max(c.kills)
	4）实现分组选择数据：
		查询四人杀怪最多的两天
			普通查询(执行四次)：select a.user_name,b.timer,b.kills from user1 a left join user_kills b on a.id = b.user_id where 				a.user_name = '' order by kills desc limit 2
			优化查询：
				row_number函数：row_number() over(order by column asc)先对列column按照升序，再为每条记录返回一个序列号;row_number() over(			partition by column1 order by column2 asc) 先按照column1分组，再对分组后的数据进行以column2升序排列
					with tmp as (select a.user_name,b.timer,b.kills,row_number() over(partition by a.user_name order by b.kills) cnt from user1 a join user_kills b on a.id = b.user_id) select * from tmp where cnt <= 2
				连接查询：select name, kills, timer from (select a.name,b.kills,b.timer,(select count(*) from user_kills c where 			c.user_id = b.user_id and c.kills >= b.kills) as cnt from user1 a,user_kills b where a.id = b.user_id) where cnt 		<=2;
					2/  select name, timer, kills from user1 c,(select a.user_id,a.timer,a.kills,count(*) cnt from user_kills a join user_kills b on b.user_id = a.user_id where a.kills <= b.kills group by a.user_id,a.timer,a.kills order by a.user_id) d where c.id = d.user_id and d.cnt <3;

2、其他优化：
	1）行转列：
		cross join方法
		case when方法：
			select sum(case when name = '孙悟空' then kills end) as 孙悟空,sum(case when name = '猪八戒' then kills end) as 猪八戒,sum(case when name = '沙悟净' then kills end) as 沙悟净
			from (select a.name, b.kills from user1 a,user_kills b where a.id = b.user_id) b;
	2）列转行：(使用union函数)/(使用序列化表)
			select user_name,replace(substring(substring_index(mobile,',',a.id),char_length(substring_index(mobile,',',a.id-1))+1),',','') as mobile from tb_sequence a cross join (select user_name,concat(mobile,',') as mobile,length(mobile)-length(replace(mobile,',',''))+1 size from user1 b) b on a.id <= b.size

3、建立唯一序列号
	1）MySQL innoDB引擎主键是按照大小排列的，要尽可能有序，尽可能小
	2）生成序列号的方法：
		MySQL：AUTO_INCREMENT
		SQLServer：IDENTITY/SEQUENCE
		Oracle：SEQUENCE
		PgSQL：SEQUENCE
		优先选择系统提供的序列号生成方式，在特殊情况下可以使用SQL方式生成序列号

4、处理重复数据
	1）删除重复数据，保留ID最大的
		MySQL：delete a from user1_test a join (select user_name,count(*),max(id) as id from user1_test group by user_name having 			count(*) > 1)b on a.user_name = b.user_name where a.id < b.id
		Oracle：delete from user1 a where id in (select max(id) as id from user1 group by name having count(*) > 1);

5、子查询优化：
	1）优点：
		使用子查询可以避免由于子查询中的数据产生的重复
		使用子查询更符合语意，易于理解
	2）在子查询中匹配两个值
		select name, kills, timer from user_kills a join user1 b on a.user_id = b.id where (a.kills,a.user_id) in (select max(kills) mk,user_id from user_kills group by user_id)

6、同一属性的多值过滤：
	1）join实现：
		select a.name,b.skill,c.skill from user1 a join user_skills b on a.id = b.user_id and b.skill = '念经' join user_skills c on c.user_id = a.id and c.skill = '变化' where b.skill_level>0 and c.skill_level>0
	2）group方法解决：
		select name from user1 a join user_skills b on a.id = b.user_id where b.skill in ('变化', '腾云', '浮水', '念经') and b.skill_level > 0 group by a.name having count(*) >= 2

7、计算累进税：
	1）select name,money, high_r, low_r, least(money - low_r,high_r - low_r) 
		from (select name,money,b.LOW_R,b.high_r 
			  from user1 a 
			  left join rates b 
    			on a.money > b.low_r
    		  where a.id = 2
    		 );

	